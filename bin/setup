#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)
APP_NAME = "legacy_bl_demurrage"
DATABASE_NAME = "#{APP_NAME}_development"

def system!(*args)
  system(*args, exception: true)
end

def load_legacy_schema
  schema_file = File.join(APP_ROOT, "db/test_schema.sql")

  if File.exist?(schema_file)
    puts "==> Loading legacy schema..."
    mysql_user = ENV["MYSQL_USER"] || "root"
    mysql_password = ENV["MYSQL_PASSWORD"] ? "-p#{ENV["MYSQL_PASSWORD"]}" : ""

    command = "mysql -u #{mysql_user} #{mysql_password} #{DATABASE_NAME} < #{schema_file}"
    unless system(command)
      warn "⚠️  Failed to load legacy schema. Ensure MySQL is running and credentials are correct."
      warn "You can set MYSQL_USER and MYSQL_PASSWORD environment variables."
    end
  else
    puts "⚠️  db/test_schema.sql not found — skipping legacy data load"
  end
end

FileUtils.chdir(APP_ROOT) do
  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  puts "\n== Preparing database =="
  system! "bin/rails db:create"

  # Load legacy schema before migrations
  load_legacy_schema

  # Only run migrations if newer than legacy schema
  schema_file = "db/schema.rb"
  legacy_file = "db/test_schema.sql"
  should_migrate =
    !File.exist?(schema_file) ||
    !File.exist?(legacy_file) ||
    File.mtime(schema_file) <= File.mtime(legacy_file)

  if should_migrate
    puts "==> Running Rails migrations..."
    system! "bin/rails db:migrate"
  else
    puts "==> Skipping migrations (schema is newer than legacy file)"
  end

  puts "\n== Seeding database =="
  system! "bin/rails db:seed"

  puts "\n== Cleaning up logs and temp files =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Restarting application server =="
  begin
    system! "bin/rails restart"
  rescue => e
    warn "⚠️  Could not restart server: #{e.message}"
  end

  puts "\n✅ Setup complete! You can now run the app with: bin/rails server"
end
